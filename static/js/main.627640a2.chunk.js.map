{"version":3,"sources":["components/toDoItem.jsx","components/toDoList.jsx","App.js","serviceWorker.js","index.js"],"names":["ToDoItem","items","onDelete","onUpdate","listItems","map","item","className","key","type","value","text","onChange","e","target","icon","onClick","duration","easing","library","add","faTrash","ToDoList","props","handleInput","preventDefault","setState","currentItem","Date","now","addItem","newItem","state","handleDelete","filteredItems","filter","console","log","handleUpdate","this","id","onSubmit","placeholder","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iUAgCeA,EA3BE,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAC7BC,EAAYH,EAAMI,KAAI,SAACC,GAC3B,OACE,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KAC9B,2BACI,2BACAC,KAAK,OACLC,MAAOJ,EAAKK,KACZC,SAAU,SAACC,GAAD,OAAKV,EAASU,EAAEC,OAAOJ,MAAMJ,EAAKE,QAE9C,8BACE,kBAAC,IAAD,CACED,UAAU,UACVQ,KAAK,QACLC,QAAS,SAACH,GAAD,OAAKX,EAASI,EAAKE,cAOxC,OAAO,6BACH,kBAAC,IAAD,CAAUS,SAAU,IAAKC,OAAO,eAC/Bd,K,eCvBPe,IAAQC,IAAIC,K,IAiFGC,E,kDA9Eb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAURC,YAAc,SAACX,GACbA,EAAEY,iBACF,EAAKC,SAAS,CACZC,YAAa,CACXhB,KAAME,EAAEC,OAAOJ,MACfF,IAAKoB,KAAKC,UAhBG,EAqBnBC,QAAU,SAACjB,GACTA,EAAEY,iBACF,IAAMM,EAAU,EAAKC,MAAML,YAC3B,GAAqB,KAAjBI,EAAQpB,KAAa,CACvB,IAAMV,EAAK,sBAAO,EAAK+B,MAAM/B,OAAlB,CAAyB8B,IACpC,EAAKL,SAAS,CACZzB,QACA0B,YAAa,CACXhB,KAAM,GACNH,IAAK,QA9BM,EAoCnByB,aAAe,SAACzB,GACd,IAAM0B,EAAgB,EAAKF,MAAM/B,MAAMkC,QAAO,SAAA7B,GAAI,OAAEA,EAAKE,KAAKA,KAC9D,EAAKkB,SAAS,CAACzB,MAAMiC,IACrBE,QAAQC,IAAI,kBAvCK,EA0CnBC,aAAe,SAAC3B,EAAKH,GACnB,IAAMP,EAAM,EAAK+B,MAAM/B,MACvBA,EAAMI,KAAI,SAAAC,GACHA,EAAKE,MAAOA,IACXF,EAAKK,KAAKA,MAGlB,EAAKe,SAAS,CAACzB,UACfmC,QAAQC,IAAI,kBAhDZ,EAAKL,MAAQ,CACX/B,MAAO,GACP0B,YAAa,CACXhB,KAAM,GACNH,IAAK,KANQ,E,qDAqDT,IACAP,EAAUsC,KAAKP,MAAf/B,MACR,OACE,yBAAKM,UAAU,gBACb,yBAAKA,UAAU,UACb,0BAAMiC,GAAG,aAAaC,SAAUF,KAAKT,SACnC,2BACErB,KAAK,OACLiC,YAAY,aACZhC,MAAO6B,KAAKP,MAAML,YAAYhB,KAC9BC,SAAU2B,KAAKf,cAEjB,4BAAQf,KAAK,UAAb,cAGJ,kBAAC,EAAD,CACER,MAAOA,EACPC,SAAUqC,KAAKN,aACf9B,SAAUoC,KAAKD,oB,GAxEFK,aCORC,G,6KARX,OACE,yBAAKrC,UAAU,OACb,kBAAC,EAAD,W,GAJUoC,cCQEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.627640a2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./toDoItem.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport FlipMove from 'react-flip-move';\r\n\r\nconst ToDoItem = ({ items, onDelete, onUpdate }) => {\r\n  const listItems = items.map((item) => {\r\n    return (\r\n      <div className=\"list\" key={item.key}>\r\n        <p>\r\n            <input\r\n            type=\"text\"\r\n            value={item.text}\r\n            onChange={(e)=>onUpdate(e.target.value,item.key)}/>\r\n      \r\n          <span>\r\n            <FontAwesomeIcon\r\n              className=\"faicons\"\r\n              icon=\"trash\"\r\n              onClick={(e)=>onDelete(item.key)}\r\n            />\r\n          </span>\r\n        </p>\r\n      </div>\r\n    );\r\n  });\r\n  return <div>\r\n      <FlipMove duration={300} easing=\"ease-in-out\">\r\n      {listItems}\r\n      </FlipMove>\r\n </div>;\r\n};\r\nexport default ToDoItem;\r\n","import React, { Component } from \"react\";\r\nimport ToDoItem from \"./toDoItem\";\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\r\n\r\nlibrary.add(faTrash)\r\n\r\nclass ToDoList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      items: [],\r\n      currentItem: {\r\n        text: \"\",\r\n        key: \"\",\r\n      },\r\n    };\r\n  }\r\n\r\n  handleInput = (e) => {\r\n    e.preventDefault();\r\n    this.setState({\r\n      currentItem: {\r\n        text: e.target.value,\r\n        key: Date.now(),\r\n      },\r\n    });\r\n  };\r\n\r\n  addItem = (e) => {\r\n    e.preventDefault();\r\n    const newItem = this.state.currentItem;\r\n    if (newItem.text !== \"\") {\r\n      const items = [...this.state.items, newItem];\r\n      this.setState({\r\n        items,\r\n        currentItem: {\r\n          text: \"\",\r\n          key: \"\",\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  handleDelete = (key) => {\r\n    const filteredItems = this.state.items.filter(item=>item.key!=key);\r\n    this.setState({items:filteredItems});\r\n    console.log(\"HANDLE DELETE\");\r\n  };\r\n\r\n  handleUpdate = (text,key) => {\r\n    const items=this.state.items;\r\n    items.map(item=>{\r\n        if(item.key ===key){\r\n            item.text=text;\r\n        }\r\n    })\r\n    this.setState({items});\r\n    console.log(\"HANDLE UPDATE\");\r\n  };\r\n\r\n  render() {\r\n    const { items } = this.state;\r\n    return (\r\n      <div className=\"toDolistMain\">\r\n        <div className=\"header\">\r\n          <form id=\"to-do-form\" onSubmit={this.addItem}>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Enter task\"\r\n              value={this.state.currentItem.text}\r\n              onChange={this.handleInput}\r\n            ></input>\r\n            <button type=\"submit\">Add Item</button>\r\n          </form>\r\n        </div>\r\n        <ToDoItem\r\n          items={items}\r\n          onDelete={this.handleDelete}\r\n          onUpdate={this.handleUpdate}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ToDoList;\r\n","import React, { Component } from \"react\";\nimport ToDoList from \"./components/toDoList\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <ToDoList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}